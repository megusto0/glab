from __future__ import annotations

import gzip
import hashlib
import logging
from datetime import datetime
from pathlib import Path
from threading import Lock
from typing import List

from flask import (
    Flask,
    jsonify,
    render_template,
    request,
    send_from_directory,
)
from werkzeug.utils import secure_filename

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad


BASE_DIR = Path(__file__).resolve().parent
STATIC_DIR = BASE_DIR / "static"
UPLOAD_DIR = STATIC_DIR / "uploads"

AES_KEY = b"0123456789ABCDEF0123456789ABCDEF"  # 32 –±–∞–π—Ç–∞ –¥–ª—è AES-256

LOG_MESSAGES: List[str] = []
IMAGE_NAMES: List[str] = []
DATA_LOCK = Lock()


def ensure_upload_dir() -> None:
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    UPLOAD_DIR.mkdir(parents=True, exist_ok=True)


def configure_logging() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s",
    )


def add_log(message: str) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π –ª–æ–≥ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    logging.info(message)
    with DATA_LOCK:
        LOG_MESSAGES.append(message)


app = Flask(__name__, template_folder=str(BASE_DIR / "templates"), static_folder=str(STATIC_DIR))


configure_logging()
ensure_upload_dir()


@app.route("/")
def index() -> str:
    """–û—Ç–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    return render_template("index.html")


@app.route("/dashboard")
def dashboard() -> str:
    """–û—Ç–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º."""
    return render_template("dashboard.html")


@app.route("/uploads/<path:filename>")
def serve_uploaded_file(filename: str):
    """–û—Ç–¥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏."""
    return send_from_directory(str(UPLOAD_DIR), filename)


@app.route("/get_updates")
def get_updates():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏ –∏ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    with DATA_LOCK:
        logs_copy = list(LOG_MESSAGES)
        images_copy = list(IMAGE_NAMES)
    return jsonify({"logs": logs_copy, "images": images_copy})


@app.route("/upload", methods=["POST"])
def upload():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –º–æ–¥—É–ª–µ–π."""
    if "image" not in request.files:
        add_log("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ.")
        return jsonify({"status": "error", "message": "–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400

    file_storage = request.files["image"]
    if file_storage.filename == "":
        add_log("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞.")
        return jsonify({"status": "error", "message": "–ò–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ"}), 400

    use_encryption = request.form.get("use_encryption", "false").lower() == "true"
    use_compression = request.form.get("use_compression", "false").lower() == "true"
    use_integrity = request.form.get("use_integrity", "false").lower() == "true"
    integrity_hash = request.form.get("integrity_hash", "")

    original_name = secure_filename(file_storage.filename)
    add_log(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {original_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")

    enabled_modules = []
    if use_encryption:
        enabled_modules.append("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
    if use_compression:
        enabled_modules.append("–°–∂–∞—Ç–∏–µ")
    if use_integrity:
        enabled_modules.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
    modules_text = ", ".join(enabled_modules) if enabled_modules else "–Ω–µ—Ç"
    add_log(f"‚öô –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: {modules_text}")

    try:
        raw_bytes = file_storage.read()
        original_size = len(raw_bytes)
        add_log(f"üìè –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_size} –±–∞–π—Ç")

        processed_bytes = raw_bytes

        if use_integrity:
            add_log("üîê –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ö—ç—à –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (SHA-256).")
            if not integrity_hash:
                add_log("‚ùå –û—à–∏–±–∫–∞: —Ö—ç—à –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Ö–æ—Ç—è –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.")
                return jsonify({"status": "error", "message": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"}), 400
            integrity_hash = integrity_hash.strip().lower()

        if use_compression:
            processed_bytes = gzip.compress(processed_bytes)
            add_log(f"üóú –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {len(processed_bytes)} –±–∞–π—Ç")

        iv = b""
        if use_encryption:
            iv = get_random_bytes(AES.block_size)
            cipher_enc = AES.new(AES_KEY, AES.MODE_CBC, iv=iv)
            padded = pad(processed_bytes, AES.block_size)
            encrypted_bytes = cipher_enc.encrypt(padded)
            processed_bytes = iv + encrypted_bytes
            add_log(f"üîí –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã (AES-CBC). –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {len(processed_bytes)} –±–∞–π—Ç")

        received_bytes = processed_bytes

        if use_encryption:
            add_log("üîì –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö.")
            iv = received_bytes[: AES.block_size]
            encrypted_part = received_bytes[AES.block_size :]
            try:
                cipher_dec = AES.new(AES_KEY, AES.MODE_CBC, iv=iv)
                decrypted_padded = cipher_dec.decrypt(encrypted_part)
                received_bytes = unpad(decrypted_padded, AES.block_size)
                add_log("‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            except ValueError as exc:
                add_log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {exc}")
                return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"}), 400

        if use_compression:
            add_log("üóú –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö GZIP.")
            try:
                received_bytes = gzip.decompress(received_bytes)
                add_log("‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            except OSError as exc:
                add_log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {exc}")
                return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"}), 400

        if use_integrity:
            add_log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ SHA-256.")
            computed_hash = hashlib.sha256(received_bytes).hexdigest()
            if computed_hash == integrity_hash:
                add_log("‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
            else:
                add_log("‚ùå –í–ù–ò–ú–ê–ù–ò–ï! –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∞!")

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
        suffix = Path(original_name).suffix or ".bin"
        saved_name = f"{timestamp}{suffix}"
        save_path = UPLOAD_DIR / saved_name
        save_path.write_bytes(received_bytes)
        add_log(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {saved_name}")

        if use_compression or use_encryption:
            processed_suffix = ".bin"
            if use_compression and not use_encryption:
                processed_suffix = suffix + ".gz"
            elif use_encryption:
                processed_suffix = ".enc"
            stored_processed_name = f"{timestamp}_processed{processed_suffix}"
            processed_save_path = UPLOAD_DIR / stored_processed_name
            processed_save_path.write_bytes(processed_bytes)
            add_log(
                f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ {stored_processed_name} "
                f"(—Ä–∞–∑–º–µ—Ä: {len(processed_bytes)} –±–∞–π—Ç)"
            )

        with DATA_LOCK:
            if saved_name not in IMAGE_NAMES:
                IMAGE_NAMES.append(saved_name)
        add_log("üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

        return jsonify({"status": "success", "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"})
    except Exception as exc:  # noqa: BLE001
        add_log(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {exc}")
        return jsonify({"status": "error", "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    add_log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:5000")
    app.run(host="0.0.0.0", port=5000, debug=False)


if __name__ == "__main__":
    main()
